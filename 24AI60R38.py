# -*- coding: utf-8 -*-
"""assignment_9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16UY2zsnKqbP_U4mYhIZSWZ5GSx93J0E7
"""

pip install neo4j

from neo4j import GraphDatabase

# Neo4j connection settings
uri = "bolt://54.211.200.70"
username = "neo4j"
password = "exposures-misalignments-tablet"

# Create Neo4j driver
driver = GraphDatabase.driver(uri, auth=(username, password))

# Function to create nodes

def create_nodes(tx):
    # Create People
    people = [
        {'name': 'Alice', 'age': 30, 'title': 'Software Engineer'},
        {'name': 'Bob', 'age': 25, 'title': 'Data Scientist'},
        {'name': 'Charlie', 'age': 35, 'title': 'Product Manager'},
        {'name': 'David', 'age': 40, 'title': 'DevOps Engineer'},
        {'name': 'Eva', 'age': 28, 'title': 'UX Designer'}
    ]
    for person in people:
        tx.run("CREATE (:Person {name: $name, age: $age, title: $title})",
                name=person['name'], age=person['age'], title=person['title'])

    # Create Companies
    companies = [
        {'name': 'TechCorp', 'industry': 'Technology'},
        {'name': 'HealthInc', 'industry': 'Healthcare'},
        {'name': 'EduWorld', 'industry': 'Education'}
    ]
    for company in companies:
        tx.run("CREATE (:Company {name: $name, industry: $industry})",
                name=company['name'], industry=company['industry'])

    # Create Projects
    projects = [
        {'name': 'Project Alpha', 'description': 'AI-powered chatbot'},
        {'name': 'Project Beta', 'description': 'Cloud-based e-commerce platform'},
        {'name': 'Project Gamma', 'description': 'Mobile app for fitness tracking'}
    ]
    for project in projects:
        tx.run("CREATE (:Project {name: $name, description: $description})",
                name=project['name'], description=project['description'])

    # Create Skills
    skills = ['Python', 'Java', 'JavaScript', 'Data Science', 'Machine Learning']
    for skill in skills:
        tx.run("CREATE (:Skill {name: $name})", name=skill)

    # Create Cities
    cities = ['New York', 'San Francisco', 'London']
    for city in cities:
        tx.run("CREATE (:City {name: $name})", name=city)

    # Create Events
    events = [
        {'name': 'Conference 2024', 'description': 'Tech conference in NYC'},
        {'name': 'Meetup 2023', 'description': 'AI meetup in SF'},
        {'name': 'Workshop 2022', 'description': 'Data science workshop in London'}
    ]
    for event in events:
        tx.run("CREATE (:Event {name: $name, description: $description})",
                name=event['name'], description=event['description'])

with driver.session() as session:
    session.execute_write(create_nodes)

"""Cypher code->

// Create Person nodes

CREATE (:Person {name: 'Alice', age: 30, title: 'Software Engineer'});
CREATE (:Person {name: 'Bob', age: 25, title: 'Data Scientist'});
CREATE (:Person {name: 'Charlie', age: 35, title: 'Product Manager'});
CREATE (:Person {name: 'David', age: 40, title: 'DevOps Engineer'});
CREATE (:Person {name: 'Eva', age: 28, title: 'UX Designer'});

// Create Company nodes

CREATE (:Company {name: 'TechCorp', industry: 'Technology'});
CREATE (:Company {name: 'HealthInc', industry: 'Healthcare'});
CREATE (:Company {name: 'EduWorld', industry: 'Education'});

// Create Project nodes

CREATE (:Project {name: 'Project Alpha', description: 'AI-powered chatbot'});
CREATE (:Project {name: 'Project Beta', description: 'Cloud-based e-commerce platform'});
CREATE (:Project {name: 'Project Gamma', description: 'Mobile app for fitness tracking'});

// Create Skill nodes

CREATE (:Skill {name: 'Python'});
CREATE (:Skill {name: 'Java'});
CREATE (:Skill {name: 'JavaScript'});
CREATE (:Skill {name: 'Data Science'});
CREATE (:Skill {name: 'Machine Learning'});

// Create City nodes

CREATE (:City {name: 'New York'});
CREATE (:City {name: 'San Francisco'});
CREATE (:City {name: 'London'});

// Create Event nodes

CREATE (:Event {name: 'Conference 2024', description: 'Tech conference in NYC'});
CREATE (:Event {name: 'Meetup 2023', description: 'AI meetup in SF'});
CREATE (:Event {name: 'Workshop 2022', description: 'Data science workshop in London'});

image1a.doc

![image1.doc](attachment:image1.doc)
"""

# Create relationships between nodes

# Function to create relationships
def create_relationships(tx):
    # KNOWS
    tx.run("MATCH (a:Person {name: 'Alice'}), (b:Person {name: 'Bob'}) CREATE (a)-[:KNOWS]->(b)")
    tx.run("MATCH (b:Person {name: 'Bob'}), (a:Person {name: 'Alice'}) CREATE (b)-[:KNOWS]->(a)")
    tx.run("MATCH (a:Person {name: 'Alice'}), (c:Person {name: 'Charlie'}) CREATE (a)-[:KNOWS]->(c)")
    tx.run("MATCH (c:Person {name: 'Charlie'}), (a:Person {name: 'Alice'}) CREATE (c)-[:KNOWS]->(a)")
    tx.run("MATCH (b:Person {name: 'Bob'}), (e:Person {name: 'Eva'}) CREATE (b)-[:KNOWS]->(e)")
    tx.run("MATCH (e:Person {name: 'Eva'}), (b:Person {name: 'Bob'}) CREATE (e)-[:KNOWS]->(b)")
    tx.run("MATCH (c:Person {name: 'Charlie'}), (d:Person {name: 'David'}) CREATE (c)-[:KNOWS]->(d)")
    tx.run("MATCH (d:Person {name: 'David'}), (c:Person {name: 'Charlie'}) CREATE (d)-[:KNOWS]->(c)")
    tx.run("MATCH (e:Person {name: 'Eva'}), (a:Person {name: 'Alice'}) CREATE (e)-[:KNOWS]->(a)")
    tx.run("MATCH (a:Person {name: 'Alice'}), (e:Person {name: 'Eva'}) CREATE (a)-[:KNOWS]->(e)")

    # WORKS_FOR
    tx.run("MATCH (a:Person {name: 'Alice'}), (c:Company {name: 'TechCorp'}) CREATE (a)-[:WORKS_FOR]->(c)")
    tx.run("MATCH (b:Person {name: 'Bob'}), (c:Company {name: 'HealthInc'}) CREATE (b)-[:WORKS_FOR]->(c)")
    tx.run("MATCH (c:Person {name: 'Charlie'}), (d:Company {name: 'EduWorld'}) CREATE (c)-[:WORKS_FOR]->(d)")
    tx.run("MATCH (d:Person {name: 'David'}), (c:Company {name: 'TechCorp'}) CREATE (d)-[:WORKS_FOR]->(c)")
    tx.run("MATCH (e:Person {name: 'Eva'}), (c:Company {name: 'TechCorp'}) CREATE (e)-[:WORKS_FOR]->(c)")

    # LIVES_IN
    tx.run("MATCH (a:Person {name: 'Alice'}), (c:City {name: 'New York'}) CREATE (a)-[:LIVES_IN]->(c)")
    tx.run("MATCH (b:Person {name: 'Bob'}), (c:City {name: 'San Francisco'}) CREATE (b)-[:LIVES_IN]->(c)")
    tx.run("MATCH (c:Person {name: 'Charlie'}), (d:City {name: 'London'}) CREATE (c)-[:LIVES_IN]->(d)")
    tx.run("MATCH (d:Person {name: 'David'}), (c:City {name: 'San Francisco'}) CREATE (d)-[:LIVES_IN]->(c)")
    tx.run("MATCH (e:Person {name: 'Eva'}), (c:City {name: 'New York'}) CREATE (e)-[:LIVES_IN]->(c)")

    # LOCATED_IN
    tx.run("MATCH (c:Company {name: 'TechCorp'}), (ci:City {name: 'San Francisco'}) CREATE (c)-[:LOCATED_IN]->(ci)")
    tx.run("MATCH (c:Company {name: 'HealthInc'}), (ci:City {name: 'New York'}) CREATE (c)-[:LOCATED_IN]->(ci)")
    tx.run("MATCH (c:Company {name: 'EduWorld'}), (ci:City {name: 'London'}) CREATE (c)-[:LOCATED_IN]->(ci)")

    # WORKED_ON
    tx.run("MATCH (a:Person {name: 'Alice'}), (p:Project {name: 'Project Alpha'}) CREATE (a)-[:WORKED_ON]->(p)")
    tx.run("MATCH (b:Person {name: 'Bob'}), (p:Project {name: 'Project Beta'}) CREATE (b)-[:WORKED_ON]->(p)")
    tx.run("MATCH (c:Person {name: 'Charlie'}), (p:Project {name: 'Project Gamma'}) CREATE (c)-[:WORKED_ON]->(p)")
    tx.run("MATCH (d:Person {name: 'David'}), (p:Project {name: 'Project Alpha'}) CREATE (d)-[:WORKED_ON]->(p)")
    tx.run("MATCH (e:Person {name: 'Eva'}), (p:Project {name: 'Project Beta'}) CREATE (e)-[:WORKED_ON]->(p)")

    # HAS_SKILL
    tx.run("MATCH (a:Person {name: 'Alice'}), (s:Skill {name: 'Python'}) CREATE (a)-[:HAS_SKILL]->(s)")
    tx.run("MATCH (b:Person {name: 'Bob'}), (s:Skill {name: 'Java'}) CREATE (b)-[:HAS_SKILL]->(s)")
    tx.run("MATCH (c:Person {name: 'Charlie'}), (s:Skill {name: 'JavaScript'}) CREATE (c)-[:HAS_SKILL]->(s)")
    tx.run("MATCH (d:Person {name: 'David'}), (s:Skill {name: 'Data Science'}) CREATE (d)-[:HAS_SKILL]->(s)")
    tx.run("MATCH (e:Person {name: 'Eva'}), (s:Skill {name: 'Machine Learning'}) CREATE (e)-[:HAS_SKILL]->(s)")

    # ATTENDED
    tx.run("MATCH (a:Person {name: 'Alice'}), (ev:Event {name: 'Conference 2024'}) CREATE (a)-[:ATTENDED]->(ev)")
    tx.run("MATCH (b:Person {name: 'Bob'}), (ev:Event {name: 'Meetup 2023'}) CREATE (b)-[:ATTENDED]->(ev)")
    tx.run("MATCH (c:Person {name: 'Charlie'}), (ev:Event {name: 'Workshop 2022'}) CREATE (c)-[:ATTENDED]->(ev)")
    tx.run("MATCH (d:Person {name: 'David'}), (ev:Event {name: 'Conference 2024'}) CREATE (d)-[:ATTENDED]->(ev)")
    tx.run("MATCH (e:Person {name: 'Eva'}), (ev:Event {name: 'Meetup 2023'}) CREATE (e)-[:ATTENDED]->(ev)")

    # HOSTED_BY
    tx.run("MATCH (ev:Event {name: 'Conference 2024'}), (c:Company {name: 'TechCorp'}) CREATE (ev)-[:HOSTED_BY]->(c)")
    tx.run("MATCH (ev:Event {name: 'Meetup 2023'}), (c:Company {name: 'HealthInc'}) CREATE (ev)-[:HOSTED_BY]->(c)")
    tx.run("MATCH (ev:Event {name: 'Workshop 2022'}), (c:Company {name: 'EduWorld'}) CREATE (ev)-[:HOSTED_BY]->(c)")

with driver.session() as session:
    session.execute_write(create_relationships)

"""Cypher code->

// KNOWS relationships

MATCH (a:Person {name: 'Alice'}), (b:Person {name: 'Bob'}) CREATE (a)-[:KNOWS]->(b);
MATCH (a:Person {name: 'Alice'}), (c:Person {name: 'Charlie'}) CREATE (a)-[:KNOWS]->(c);
MATCH (b:Person {name: 'Bob'}), (e:Person {name: 'Eva'}) CREATE (b)-[:KNOWS]->(e);
MATCH (c:Person {name: 'Charlie'}), (d:Person {name: 'David'}) CREATE (c)-[:KNOWS]->(d);
MATCH (e:Person {name: 'Eva'}), (a:Person {name: 'Alice'}) CREATE (e)-[:KNOWS]->(a);

// WORKS_FOR relationships

MATCH (a:Person {name: 'Alice'}), (c:Company {name: 'TechCorp'}) CREATE (a)-[:WORKS_FOR]->(c);
MATCH (b:Person {name: 'Bob'}), (c:Company {name: 'HealthInc'}) CREATE (b)-[:WORKS_FOR]->(c);
MATCH (c:Person {name: 'Charlie'}), (d:Company {name: 'EduWorld'}) CREATE (c)-[:WORKS_FOR]->(d);
MATCH (d:Person {name: 'David'}), (c:Company {name: 'TechCorp'}) CREATE (d)-[:WORKS_FOR]->(c);
MATCH (e:Person {name: 'Eva'}), (c:Company {name: 'TechCorp'}) CREATE (e)-[:WORKS_FOR]->(c);

// LIVES_IN relationships

MATCH (a:Person {name: 'Alice'}), (c:City {name: 'New York'}) CREATE (a)-[:LIVES_IN]->(c);
MATCH (b:Person {name: 'Bob'}), (c:City {name: 'San Francisco'}) CREATE (b)-[:LIVES_IN]->(c);
MATCH (c:Person {name: 'Charlie'}), (d:City {name: 'London'}) CREATE (c)-[:LIVES_IN]->(d);
MATCH (d:Person {name: 'David'}), (c:City {name: 'San Francisco'}) CREATE (d)-[:LIVES_IN]->(c);
MATCH (e:Person {name: 'Eva'}), (c:City {name: 'New York'}) CREATE (e)-[:LIVES_IN]->(c);

// LOCATED_IN relationships

MATCH (c:Company {name: 'TechCorp'}), (ci:City {name: 'San Francisco'}) CREATE (c)-[:LOCATED_IN]->(ci);
MATCH (c:Company {name: 'HealthInc'}), (ci:City {name: 'New York'}) CREATE (c)-[:LOCATED_IN]->(ci);
MATCH (c:Company {name: 'EduWorld'}), (ci:City {name: 'London'}) CREATE (c)-[:LOCATED_IN]->(ci);

// WORKED_ON relationships

MATCH (a:Person {name: 'Alice'}), (p:Project {name: 'Project Alpha'}) CREATE (a)-[:WORKED_ON]->(p);
MATCH (b:Person {name: 'Bob'}), (p:Project {name: 'Project Beta'}) CREATE (b)-[:WORKED_ON]->(p);
MATCH (c:Person {name: 'Charlie'}), (p:Project {name: 'Project Gamma'}) CREATE (c)-[:WORKED_ON]->(p);
MATCH (d:Person {name: 'David'}), (p:Project {name: 'Project Alpha'}) CREATE (d)-[:WORKED_ON]->(p);
MATCH (e:Person {name: 'Eva'}), (p:Project {name: 'Project Beta'}) CREATE (e)-[:WORKED_ON]->(p);

// HAS_SKILL relationships

MATCH (a:Person {name: 'Alice'}), (s:Skill {name: 'Python'}) CREATE (a)-[:HAS_SKILL]->(s);
MATCH (b:Person {name: 'Bob'}), (s:Skill {name: 'Java'}) CREATE (b)-[:HAS_SKILL]->(s);
MATCH (c:Person {name: 'Charlie'}), (s:Skill {name: 'JavaScript'}) CREATE (c)-[:HAS_SKILL]->(s);
MATCH (d:Person {name: 'David'}), (s:Skill {name: 'Data Science'}) CREATE (d)-[:HAS_SKILL]->(s);
MATCH (e:Person {name: 'Eva'}), (s:Skill {name: 'Machine Learning'}) CREATE (e)-[:HAS_SKILL]->(s);

// ATTENDED relationships

MATCH (a:Person {name: 'Alice'}), (ev:Event {name: 'Conference 2024'}) CREATE (a)-[:ATTENDED]->(ev);
MATCH (b:Person {name: 'Bob'}), (ev:Event {name: 'Meetup 2023'}) CREATE (b)-[:ATTENDED]->(ev);
MATCH (c:Person {name: 'Charlie'}), (ev:Event {name: 'Workshop 2022'}) CREATE (c)-[:ATTENDED]->(ev);
MATCH (d:Person {name: 'David'}), (ev:Event {name: 'Conference 2024'}) CREATE (d)-[:ATTENDED]->(ev);
MATCH (e:Person {name: 'Eva'}), (ev:Event {name: 'Meetup 2023'}) CREATE (e)-[:ATTENDED]->(ev);

// HOSTED_BY relationships

MATCH (ev:Event {name: 'Conference 2024'}), (c:Company {name: 'TechCorp'}) CREATE (ev)-[:HOSTED_BY]->(c);
MATCH (ev:Event {name: 'Meetup 2023'}), (c:Company {name: 'HealthInc'}) CREATE (ev)-[:HOSTED_BY]->(c);
MATCH (ev:Event {name: 'Workshop 2022'}), (c:Company {name: 'EduWorld'}) CREATE (ev)-[:HOSTED_BY]->(c);

image2a.doc

![image2.doc](attachment:image2.doc)
"""

def run_query(query):
    with driver.session() as session:
        result = session.run(query)
        return [record for record in result]

# Question 1
query_1 = "MATCH (p:Person)-[:WORKS_FOR]->(c:Company {name: 'TechCorp'}), (p)-[:LIVES_IN]->(ci:City {name: 'New York'}) RETURN p.name AS name"
employees_in_ny = run_query(query_1)
print("Employees in NY:", employees_in_ny)

"""Cypher code->

MATCH (p:Person)-[:WORKS_FOR]->(c:Company {name: 'TechCorp'}), (p)-[:LIVES_IN]->(ci:City {name: 'New York'})

RETURN p.name AS name

![image3.doc](attachment:image3.doc)
"""

# Question 2
query_2 = "MATCH (e:Event)-[:HOSTED_BY]->(c:Company)-[:LOCATED_IN]->(ci:City {name: 'San Francisco'}) RETURN e.name AS event_name, c.name AS company_name"
events_in_city = run_query(query_2)
print("Events in City:", events_in_city)

"""Cypher code->

MATCH (e:Event)-[:HOSTED_BY]->(c:Company)-[:LOCATED_IN]->(ci:City {name: 'San Francisco'})

RETURN e.name AS event_name, c.name AS company_name

![image4.doc](attachment:image4.doc)
"""

# Question 3
query_3 = "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE s.name IN ['Python', 'Data Science'] RETURN p.name AS name, s.name AS skill"
people_with_skills = run_query(query_3)
print("People with specific skills:", people_with_skills)

"""Cypher code->

MATCH (p:Person)-[:HAS_SKILL]->(s:Skill)
WHERE s.name IN ['Python', 'Data Science']

RETURN p.name AS name, s.name AS skill

![image5.doc](attachment:*image5*.doc)
"""

# Question 4
query_4 = """
MATCH (p1:Person)-[:KNOWS]->(p2:Person),
      (p1)-[:ATTENDED]->(e:Event),
      (p2)-[:ATTENDED]->(e)
WHERE p1.name < p2.name
RETURN DISTINCT p1.name AS Person1, p2.name AS Person2, e.name AS Event
"""
pairs_attended_event = run_query(query_4)
print("Pairs who know each other and attended the same event:", [(record["Person1"], record["Person2"], record["Event"]) for record in pairs_attended_event])

"""Cypher Code->

MATCH (p1:Person)-[:KNOWS]->(p2:Person),
      (p1)-[:ATTENDED]->(e:Event),
      (p2)-[:ATTENDED]->(e)

WHERE p1.name < p2.name

RETURN DISTINCT p1.name AS Person1, p2.name AS Person2, e.name AS Event;

![image6.doc](attachment:*image6*.doc)
"""

# Close the driver after all operations
driver.close()

def delete_all(tx):
    tx.run("MATCH (n) DETACH DELETE n")

with driver.session() as session:
    session.execute_write(delete_all)

